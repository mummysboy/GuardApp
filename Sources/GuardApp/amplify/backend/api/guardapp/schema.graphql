# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

enum Role {
  ADMIN
  SECURITY_GUARD
  SUPERVISOR
}

enum ShiftState {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

# Scalar input types for filtering
input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelRoleInput {
  eq: Role
  ne: Role
}

input ModelShiftStateInput {
  eq: ShiftState
  ne: ShiftState
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type User @model {
  id: ID!
  tenantId: String!
  role: Role!
  email: String!
  firstName: String
  lastName: String
  phone: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Shift @model {
  id: ID!
  tenantId: String!
  title: String!
  location: String!
  startAt: AWSDateTime!
  endAt: AWSDateTime!
  rate: Float!
  state: ShiftState!
  userId: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

# Input types for sync queries
input ModelUserFilterInput {
  id: ModelIDInput
  tenantId: ModelStringInput
  role: ModelRoleInput
  email: ModelStringInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  phone: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input ModelShiftFilterInput {
  id: ModelIDInput
  tenantId: ModelStringInput
  title: ModelStringInput
  location: ModelStringInput
  startAt: ModelStringInput
  endAt: ModelStringInput
  rate: ModelFloatInput
  state: ModelShiftStateInput
  userId: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelShiftFilterInput]
  or: [ModelShiftFilterInput]
  not: ModelShiftFilterInput
}

# Connection types for sync queries
type ModelUserConnection {
  items: [User]!
  nextToken: String
  startedAt: AWSTimestamp
}

type ModelShiftConnection {
  items: [Shift]!
  nextToken: String
  startedAt: AWSTimestamp
}

# Sync queries required for DataStore
type Query {
  syncUsers(
    filter: ModelUserFilterInput
    limit: Int
    nextToken: String
    lastSync: AWSTimestamp
  ): ModelUserConnection
  
  syncShifts(
    filter: ModelShiftFilterInput
    limit: Int
    nextToken: String
    lastSync: AWSTimestamp
  ): ModelShiftConnection
}
